{"version":3,"sources":["../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/@material-ui/core/esm/CardActionArea/CardActionArea.js","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","../node_modules/@material-ui/core/esm/CardMedia/CardMedia.js","components/SongCard/SongCard.js"],"names":["_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","clsx__WEBPACK_IMPORTED_MODULE_4__","_Paper__WEBPACK_IMPORTED_MODULE_5__","_styles_withStyles__WEBPACK_IMPORTED_MODULE_6__","Card","props","ref","classes","className","_props$raised","raised","other","Object","root","elevation","__webpack_exports__","overflow","name","_styles_withStyles__WEBPACK_IMPORTED_MODULE_5__","_ButtonBase__WEBPACK_IMPORTED_MODULE_6__","CardActionArea","children","focusVisibleClassName","focusVisible","focusHighlight","theme","display","textAlign","width","&:hover $focusHighlight","opacity","palette","action","hoverOpacity","&$focusVisible $focusHighlight","pointerEvents","position","top","right","bottom","left","borderRadius","backgroundColor","transition","transitions","create","duration","short","CardContent","_props$component","component","Component","padding","&:last-child","paddingBottom","MEDIA_COMPONENTS","CardMedia","image","src","style","isMediaComponent","indexOf","composedStyle","backgroundImage","concat","media","img","undefined","backgroundSize","backgroundRepeat","backgroundPosition","objectFit","r","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_Card__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_CardActionArea__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_CardMedia__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_CardContent__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core__WEBPACK_IMPORTED_MODULE_6__","SongCard","str","video_","video","snippet","a","createElement","onClick","onPlay","key_","list","alt","height","thumbnail","thumbnails","standard","url","title","replace","loading","gutterBottom","variant","slice","color","description","channelTitle","defaultProps"],"mappings":"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","file":"static/js/20.89802f03.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      textAlign: 'inherit',\n      width: '100%',\n      '&:hover $focusHighlight': {\n        opacity: theme.palette.action.hoverOpacity\n      },\n      '&$focusVisible $focusHighlight': {\n        opacity: 0.12\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */\n    focusVisible: {},\n\n    /* Styles applied to the overlay that covers the action area when it is keyboard focused. */\n    focusHighlight: {\n      overflow: 'hidden',\n      pointerEvents: 'none',\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      borderRadius: 'inherit',\n      opacity: 0,\n      backgroundColor: 'currentcolor',\n      transition: theme.transitions.create('opacity', {\n        duration: theme.transitions.duration.short\n      })\n    }\n  };\n};\nvar CardActionArea = /*#__PURE__*/React.forwardRef(function CardActionArea(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      focusVisibleClassName = props.focusVisibleClassName,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"focusVisibleClassName\"]);\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref\n  }, other), children, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.focusHighlight\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActionArea'\n})(CardActionArea);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { chainPropTypes } from '@material-ui/utils';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center'\n  },\n\n  /* Styles applied to the root element if `component=\"video, audio, picture, iframe, or img\"`. */\n  media: {\n    width: '100%'\n  },\n\n  /* Styles applied to the root element if `component=\"picture or img\"`. */\n  img: {\n    // ⚠️ object-fit is not supported by IE 11.\n    objectFit: 'cover'\n  }\n};\nvar MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];\nvar CardMedia = /*#__PURE__*/React.forwardRef(function CardMedia(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      image = props.image,\n      src = props.src,\n      style = props.style,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"image\", \"src\", \"style\"]);\n\n  var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;\n  var composedStyle = !isMediaComponent && image ? _extends({\n    backgroundImage: \"url(\\\"\".concat(image, \"\\\")\")\n  }, style) : style;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, isMediaComponent && classes.media, \"picture img\".indexOf(Component) !== -1 && classes.img),\n    ref: ref,\n    style: composedStyle,\n    src: isMediaComponent ? image || src : undefined\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? CardMedia.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: chainPropTypes(PropTypes.node, function (props) {\n    if (!props.children && !props.image && !props.src && !props.component) {\n      return new Error('Material-UI: Either `children`, `image`, `src` or `component` prop must be specified.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Image to be displayed as a background image.\n   * Either `image` or `src` prop must be specified.\n   * Note that caller must specify height otherwise the image will not be visible.\n   */\n  image: PropTypes.string,\n\n  /**\n   * An alias for `image` property.\n   * Available only with media components.\n   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.\n   */\n  src: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardMedia'\n})(CardMedia);","import React from 'react';\nimport './SongCard.css';\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport {Typography} from \"@material-ui/core\";\n\n// = {title, description, tags, channelTitle, videoId, thumbnail}\nfunction SongCard(props) {\n    const video_ = props.video.snippet;\n\n    function unEntity(str) {\n        return str.replace(/&amp;/g, \"&\").replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\");\n    }\n\n    return (\n        <Card className={'SongCard'} style={{width: \"18rem\"}}\n              onClick={() => props.onPlay(props.video, props.key_, props.list)}>\n            <CardActionArea>\n                <CardMedia\n                    component=\"img\"\n                    alt=\"Contemplative Reptile\"\n                    height=\"140\"\n                    image={props.thumbnail || video_.thumbnails.standard.url}\n                    title={unEntity(video_.title)}\n                    loading={'lazy'}\n\n                />\n                <CardContent className={'text-left'}>\n                    <Typography gutterBottom variant=\"h6\" component=\"p\" className={'text-truncate'}>\n                        {video_.title.slice(0, 70) + \" ...\"}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className={'text-truncate'}>\n                        {video_.description.slice(0, 70) + \" ...\"}\n                        <span className={'text-muted'}>\n                        {video_.channelTitle}\n                    </span>\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    );\n}\n\nSongCard.propTypes = {};\n\nSongCard.defaultProps = {};\n\nexport default SongCard;\n"],"sourceRoot":""}